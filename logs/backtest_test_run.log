[DEBUG] About to fetch data for USDJPY (symbol: USDJPY=X) with yfinance...
[DEBUG] Data fetched for USDJPY. Type: <class 'pandas.core.frame.DataFrame'>, Shape: (4699, 5)
[DEBUG] Flattened columns: Index(['USDJPY=X', 'USDJPY=X', 'USDJPY=X', 'USDJPY=X', 'USDJPY=X'], dtype='object')
[DEBUG] Renamed columns to standard OHLCV: Index(['Open', 'High', 'Low', 'Close', 'Volume'], dtype='object')
[DEBUG] Data before dropna for USDJPY:
                                 Open        High  ...       Close  Volume
Datetime                                           ...                    
2024-10-10 23:00:00+00:00  148.703003  148.746002  ...  148.658997       0
2024-10-11 00:00:00+00:00  148.459000  148.761993  ...  148.701004       0
2024-10-11 01:00:00+00:00  148.759995  148.798004  ...  148.457001       0

[3 rows x 5 columns]
[DEBUG] Checking column 'Open' in data for USDJPY...
[DEBUG] NaN count for column 'Open' in USDJPY: 0
[DEBUG] Checking column 'High' in data for USDJPY...
[DEBUG] NaN count for column 'High' in USDJPY: 0
[DEBUG] Checking column 'Low' in data for USDJPY...
[DEBUG] NaN count for column 'Low' in USDJPY: 0
[DEBUG] Checking column 'Close' in data for USDJPY...
[DEBUG] NaN count for column 'Close' in USDJPY: 0
[DEBUG] Checking column 'Volume' in data for USDJPY...
[DEBUG] NaN count for column 'Volume' in USDJPY: 0
[DEBUG] Price data for USDJPY (symbol: USDJPY=X), first 3 rows:
                                 Open        High  ...       Close  Volume
Datetime                                           ...                    
2024-10-10 23:00:00+00:00  148.703003  148.746002  ...  148.658997       0
2024-10-11 00:00:00+00:00  148.459000  148.761993  ...  148.701004       0
2024-10-11 01:00:00+00:00  148.759995  148.798004  ...  148.457001       0

[3 rows x 5 columns]
[DEBUG] About to fetch data for USDJPY (symbol: USDJPY=X) with yfinance...
[DEBUG] Data fetched for USDJPY. Type: <class 'pandas.core.frame.DataFrame'>, Shape: (4699, 5)
[DEBUG] Flattened columns: Index(['USDJPY=X', 'USDJPY=X', 'USDJPY=X', 'USDJPY=X', 'USDJPY=X'], dtype='object')
[DEBUG] Renamed columns to standard OHLCV: Index(['Open', 'High', 'Low', 'Close', 'Volume'], dtype='object')
[DEBUG] Data before dropna for USDJPY:
                                 Open        High  ...       Close  Volume
Datetime                                           ...                    
2024-10-10 23:00:00+00:00  148.703003  148.746002  ...  148.658997       0
2024-10-11 00:00:00+00:00  148.459000  148.761993  ...  148.701004       0
2024-10-11 01:00:00+00:00  148.759995  148.798004  ...  148.457001       0

[3 rows x 5 columns]
[DEBUG] Checking column 'Open' in data for USDJPY...
[DEBUG] NaN count for column 'Open' in USDJPY: 0
[DEBUG] Checking column 'High' in data for USDJPY...
[DEBUG] NaN count for column 'High' in USDJPY: 0
[DEBUG] Checking column 'Low' in data for USDJPY...
[DEBUG] NaN count for column 'Low' in USDJPY: 0
[DEBUG] Checking column 'Close' in data for USDJPY...
[DEBUG] NaN count for column 'Close' in USDJPY: 0
[DEBUG] Checking column 'Volume' in data for USDJPY...
[DEBUG] NaN count for column 'Volume' in USDJPY: 0
[DEBUG] Price data for USDJPY (symbol: USDJPY=X), first 3 rows:
                                 Open        High  ...       Close  Volume
Datetime                                           ...                    
2024-10-10 23:00:00+00:00  148.703003  148.746002  ...  148.658997       0
2024-10-11 00:00:00+00:00  148.459000  148.761993  ...  148.701004       0
2024-10-11 01:00:00+00:00  148.759995  148.798004  ...  148.457001       0

[3 rows x 5 columns]
[DEBUG] About to fetch data for USDJPY (symbol: USDJPY=X) with yfinance...
[DEBUG] Data fetched for USDJPY. Type: <class 'pandas.core.frame.DataFrame'>, Shape: (1193, 5)
[DEBUG] Flattened columns: Index(['USDJPY=X', 'USDJPY=X', 'USDJPY=X', 'USDJPY=X', 'USDJPY=X'], dtype='object')
[DEBUG] Renamed columns to standard OHLCV: Index(['Open', 'High', 'Low', 'Close', 'Volume'], dtype='object')
[DEBUG] Data before dropna for USDJPY:
                                 Open        High  ...       Close  Volume
Datetime                                           ...                    
2024-10-10 23:00:00+00:00  148.666000  148.798004  ...  148.658997       0
2024-10-11 03:00:00+00:00  148.692001  148.856995  ...  148.666000       0
2024-10-11 07:00:00+00:00  149.054001  149.082993  ...  148.688995       0

[3 rows x 5 columns]
[DEBUG] Checking column 'Open' in data for USDJPY...
[DEBUG] NaN count for column 'Open' in USDJPY: 0
[DEBUG] Checking column 'High' in data for USDJPY...
[DEBUG] NaN count for column 'High' in USDJPY: 0
[DEBUG] Checking column 'Low' in data for USDJPY...
[DEBUG] NaN count for column 'Low' in USDJPY: 0
[DEBUG] Checking column 'Close' in data for USDJPY...
[DEBUG] NaN count for column 'Close' in USDJPY: 0
[DEBUG] Checking column 'Volume' in data for USDJPY...
[DEBUG] NaN count for column 'Volume' in USDJPY: 0
[DEBUG] Price data for USDJPY (symbol: USDJPY=X), first 3 rows:
                                 Open        High  ...       Close  Volume
Datetime                                           ...                    
2024-10-10 23:00:00+00:00  148.666000  148.798004  ...  148.658997       0
2024-10-11 03:00:00+00:00  148.692001  148.856995  ...  148.666000       0
2024-10-11 07:00:00+00:00  149.054001  149.082993  ...  148.688995       0

[3 rows x 5 columns]
[DEBUG] About to fetch data for USDJPY (symbol: USDJPY=X) with yfinance...
[DEBUG] Data fetched for USDJPY. Type: <class 'pandas.core.frame.DataFrame'>, Shape: (197, 5)
[DEBUG] Flattened columns: Index(['USDJPY=X', 'USDJPY=X', 'USDJPY=X', 'USDJPY=X', 'USDJPY=X'], dtype='object')
[DEBUG] Renamed columns to standard OHLCV: Index(['Open', 'High', 'Low', 'Close', 'Volume'], dtype='object')
[DEBUG] Data before dropna for USDJPY:
                  Open        High         Low       Close  Volume
Date                                                              
2024-10-11  148.703995  149.263000  148.399002  148.703995       0
2024-10-14  149.334000  149.949005  149.145996  149.334000       0
2024-10-15  149.669998  149.740005  148.852997  149.669998       0
[DEBUG] Checking column 'Open' in data for USDJPY...
[DEBUG] NaN count for column 'Open' in USDJPY: 0
[DEBUG] Checking column 'High' in data for USDJPY...
[DEBUG] NaN count for column 'High' in USDJPY: 0
[DEBUG] Checking column 'Low' in data for USDJPY...
[DEBUG] NaN count for column 'Low' in USDJPY: 0
[DEBUG] Checking column 'Close' in data for USDJPY...
[DEBUG] NaN count for column 'Close' in USDJPY: 0
[DEBUG] Checking column 'Volume' in data for USDJPY...
[DEBUG] NaN count for column 'Volume' in USDJPY: 0
[DEBUG] Price data for USDJPY (symbol: USDJPY=X), first 3 rows:
                  Open        High         Low       Close  Volume
Date                                                              
2024-10-11  148.703995  149.263000  148.399002  148.703995       0
2024-10-14  149.334000  149.949005  149.145996  149.334000       0
2024-10-15  149.669998  149.740005  148.852997  149.669998       0
                                 Open        High  ...  fib_levels  wyckoff_phases
Datetime                                           ...                            
2024-10-10 23:00:00+00:00  148.703003  148.746002  ...           0               0
2024-10-11 00:00:00+00:00  148.459000  148.761993  ...           0               0
2024-10-11 01:00:00+00:00  148.759995  148.798004  ...           0               0
2024-10-11 02:00:00+00:00  148.666000  148.776993  ...           0               0
2024-10-11 03:00:00+00:00  148.710999  148.733994  ...           0               0

[5 rows x 74 columns]
                                 Open        High  ...  future_return  target
Datetime                                           ...                       
2024-10-10 23:00:00+00:00  148.703003  148.746002  ...       0.000309       0
2024-10-11 00:00:00+00:00  148.459000  148.761993  ...       0.000061       0
2024-10-11 01:00:00+00:00  148.759995  148.798004  ...       0.001556       1
2024-10-11 02:00:00+00:00  148.666000  148.776993  ...      -0.000457       0
2024-10-11 03:00:00+00:00  148.710999  148.733994  ...       0.000726       0

[5 rows x 76 columns]
DEBUG: df columns after dropna on target: Index(['Open', 'High', 'Low', 'Close', 'Volume', 'atr_14', 'volatility_20',
       'sma_20', 'sma_50', 'sma_200', 'ema_12', 'ema_26', 'rsi_14', 'macd',
       'macd_signal', 'bb_high', 'bb_low', 'stoch_k', 'stoch_d', 'fib_0',
       'dist_to_fib_0', 'fib_236', 'dist_to_fib_236', 'fib_382',
       'dist_to_fib_382', 'fib_500', 'dist_to_fib_500', 'fib_618',
       'dist_to_fib_618', 'fib_786', 'dist_to_fib_786', 'fib_100',
       'dist_to_fib_100', 'trendline_slope_high', 'trendline_slope_low',
       'trendline_up', 'trendline_down', 'breakout_high', 'breakout_low',
       'dist_to_high', 'dist_to_low', 'vol_spike_atr', 'vol_spike_std',
       'is_trending', 'is_ranging', 'supply_zone', 'demand_zone',
       'price_vs_sma20_4h', 'price_vs_sma50_4h', 'trend_strength_4h',
       'news_sentiment', 'doji', 'hammer', 'bullish_engulfing',
       'bearish_engulfing', 'shooting_star', 'pin_bar',
       'bullish_engulfing_bar', 'bearish_engulfing_bar', 'inside_bar',
       'head_shoulders', 'inv_head_shoulders', 'double_top', 'double_bottom',
       'rising_wedge', 'falling_wedge', 'fakeout_up', 'fakeout_down',
       'bullish_flag', 'bearish_flag', 'bullish_pennant', 'bearish_pennant',
       'fib_levels', 'wyckoff_phases', 'future_return', 'target',
       'wyckoff_accumulation', 'wyckoff_distribution', 'wyckoff_markup',
       'wyckoff_markdown', 'wyckoff_unknown'],
      dtype='object')
                                 Open  ...  wyckoff_unknown
Datetime                               ...                 
2024-10-10 23:00:00+00:00  148.703003  ...                0
2024-10-11 00:00:00+00:00  148.459000  ...                0
2024-10-11 01:00:00+00:00  148.759995  ...                0
2024-10-11 02:00:00+00:00  148.666000  ...                0
2024-10-11 03:00:00+00:00  148.710999  ...                0

[5 rows x 81 columns]
Class balance after upsampling:
target
0    3106
1    3106
Name: count, dtype: int64
[LightGBM] [Info] Number of positive: 1656, number of negative: 1656
[LightGBM] [Info] Auto-choosing row-wise multi-threading, the overhead of testing was 0.000293 seconds.
You can set `force_row_wise=true` to remove the overhead.
And if memory is not enough, you can set `force_col_wise=true`.
[LightGBM] [Info] Total Bins 528
[LightGBM] [Info] Number of data points in the train set: 3312, number of used features: 8
[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.500000 -> initscore=0.000000
[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
